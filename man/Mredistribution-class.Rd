% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DNST_model.R
\docType{class}
\name{Mredistribution-class}
\alias{Mredistribution}
\alias{Mredistribution-class}
\title{Mass Redistribution function}
\description{
A description of a process that transfers mass from one domain to
 another.  A common example is the dissolution of NAPL into groundwater.
 In this case, slot \code{from} may be \code{"NAPL"}, slot \code{to} may
 be \code{"plume"} and slot \code{flux} will be a function which returns
 the rate of mass transfer (dissolution) from the NAPL domain into the
 plume domain, as a function of the NAPL mass.
}
\details{
The \code{flux} function must have all four arguments even if in fact
 they are not all used.  The function may also use variables that will
 exist in the \code{\link{DNST}} solver function by using, for example,
 \code{get("qh", env)}. Typically, \code{qh} will feature somewhere in
 some functions, as the dissolution mass flux, for example, will depend
 on the water speed through the source zone.  \code{qh} is given to
 \code{\link{DNST}} as a layer-by-layer function of time, so it is common
 to use \code{get("qh", env)[[LAY]](time)} in the \code{flux} function.
 Some functions may also use the \code{M} array in order to include some
 dependency on the source zone history.  When included as part of a
 \code{\link{DNAPLmodel}} (as intended), the function may use any of the
 parameters saved in the slot \code{params} as well. Remember to subset
 these parameters by layer (\code{par[[LAY]]}) when the parameters could
 vary by layer.

When used in \code{\link{DNST}}, the solver function, no flux is allowed
 to reduce the mass of a domain below 0, so the solution is always
 stable.  Therefore, this needn't be worried about in the \code{flux}
 function.

\code{Mredistribution} objects are created within the provided
 \code{\link{DNAPLmodel}} creation functions
 (\code{\link{cstG.DNmodel}}, \code{\link{cnvG.DNmodel}} and
 \code{\link{DDpg.DNmodel}} currently).  Defining your own
 \code{Mredistribution} is fairly advanced and will require some
 understanding of environments in \code{R}.
}
\section{Slots}{

\describe{
\item{\code{from}}{character string;
the domain from which mass is taken}

\item{\code{to}}{character string;
the domaint to which mass is sent}

\item{\code{flux}}{function;
a function whose arguments are:\cr
\code{fromM}: mass of \code{from} domain\cr
\code{toM}: mass of \code{to} domain\cr
\code{LAY}: the layer of the DNAPL model\cr
\code{time}: in days since 30/12/1899\cr
\code{env}: the calling function's environment\cr
and whose output represents the rate of mass transfer between the
 \code{from} and \code{to} domains (negative outputs are permitted and
 imply a flux the other way; in this way an equilibrium may be set up)}
}}
\examples{
# exponentially declining dissolution of a NAPL pool
\dontrun{
Ndiss <- Mredistribution(from = "pool",
                         to = "plume",
                         flux = function(fromM, toM, LAY, time, env){
                           # get historic maximum of mass from this layer
                           # - use get("M", env) to access the mass array from
                           #    the DNST master function which will call this
                           #    function
                           max.mass.so.far <- max(get("M", env)[LAY,, "pool"])

                           # to use this redistribution model, pool.width and
                           #  pool.height will need to be defined in the global
                           #  environment or, better, included in the params
                           #  slot of the DNAPLmodel object which contains this
                           #  Mredistribution object
                           Xsect.area <- pool.width*pool.height

                           # again, horizontal flow (Darcy velocity) is accessed
                           #  by get("qh", env)
                           # solubility must be defined in the same way as
                           #  pool.width and pool.height (see comment above)
                           solubility*Xsect.area*get("qh", env)[[LAY]](time)*fromM/max.mass.so.far
                         })
}

}

